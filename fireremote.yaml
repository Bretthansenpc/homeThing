esphome:
  name: fireremote
  platform: ESP32
  board: m5stack-fire
  includes:
    - esphomeRemote/MenuGlobals.h
    - esphomeRemote/MenuTitle.h
    - esphomeRemote/esphomeRemotePlayer.h
    - esphomeRemote/esphomeRemoteService.h
    - esphomeRemote/esphomeRemoteLight.h
    - esphomeRemote/esphomeRemoteSensor.h
    - esphomeRemote/DisplayUpdateInterface.h
    - esphomeRemote/esphomeRemote.h
    - esphomeRemote/esphomeRemote3Button.h
    - esphomeRemote/esphomeRemoteFireLight.h

external_components:
  - source:
      type: git
      url: https://github.com/ssieb/custom_components
    components: [ ip5306 ]

i2c:
  sda: 21
  scl: 22
  scan: True

ip5306:
  battery_level:
    name: M5 Battery Percent
    id: batteryPercent
  charger_connected:
    id: connected
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("TEST", "charging");
            if (charging == false) {
              charging = true;
            }
        
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("TEST", "not charging");
            if (charging == true) {
              charging = false;
            }
  charge_full:
    id: full
    on_press:
      then:
        - lambda: ESP_LOGD("TEST", "fully charged");
    on_release:
      then:
        - lambda: ESP_LOGD("TEST", "still charging");

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESPHome Remote Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

ota:

deep_sleep:
  id: deep_sleep_1
  wakeup_pin: 39
  wakeup_pin_mode: INVERT_WAKEUP

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 45%
    blue: 68%
  - id: my_gray_dark
    red: 40%
    green: 40%
    blue: 40%
  - id: my_gray_dark_2
    red: 3%
    green: 3%
    blue: 3%
  - id: my_gray
    red: 10%
    green: 10%
    blue: 10%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
## Font needs to be monospace!
  - file: "fonts/iosevka.ttf"
    id: large_font
    size: 28
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''
  - file: "fonts/iosevka.ttf"
    id: medium_font
    size: 22
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''
  - file: "fonts/iosevka.ttf"
    id: small_font
    size: 18
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''

image:
## You need 2 icons for each, one with a color background, one with black
## todo would be make these material icons or svg
  - file: "images/playWhite.png"
    id: image_play_white
    type: RGB24
  - file: "images/play.png"
    id: image_play
    type: RGB24
  - file: "images/pause.png"
    id: image_pause
    type: RGB24
  - file: "images/pauseWhite.png"
    id: image_pause_white
    type: RGB24
  - file: "images/stop.png"
    id: image_stop
    type: RGB24
  - file: "images/stopWhite.png"
    id: image_stop_white
    type: RGB24
  - file: "images/sleepWhite.png"
    id: image_sleep_white
    type: RGB24
  - file: "images/sleep.png"
    id: image_sleep
    type: RGB24
  - file: "images/shuffle.png"
    id: image_shuffle
    type: RGB24
  - file: "images/shuffleDisabled.png"
    id: image_shuffle_disabled
    type: RGB24
  - file: "images/volumeLow.png"
    id: image_volume_low
    type: RGB24
  - file: "images/volumeHigh.png"
    id: image_volume_high
    type: RGB24
    
globals:
## Size of the large font above
  - id: large_font_size
    type: int
    restore_value: no
    initial_value: "28"

## Size of the medium font above
  - id: medium_font_size
    type: int
    restore_value: no
    initial_value: "22"

## Size of the small font above
  - id: small_font_size
    type: int
    restore_value: no
    initial_value: "18"
    
## Height / width ratio of the monospace font used
  - id: font_size_width_ratio
    type: double
    restore_value: no
    initial_value: "0.6"
    
## Status bar height
  - id: header_height
    type: int
    restore_value: no
    initial_value: "24"
    
## Global margin size
  - id: margin_size
    type: int
    restore_value: no
    initial_value: "8"
    
## Scrollbar total width
  - id: scroll_bar_width
    type: int
    restore_value: no
    initial_value: "6"
    
## Volume bar and media duration bar bottom margin
  - id: bottom_bar_margin
    type: int
    restore_value: no
    initial_value: "42"
    
## Height and width of the icons used in px
  - id: icon_size
    type: int
    restore_value: no
    initial_value: "12"
    
## Max lines on now playing screen before truncating happens
  - id: now_playing_max_lines
    type: int
    restore_value: no
    initial_value: "5"
    
## Draw buttons in now playing menu for 3 button devices
  - id: draw_now_playing_menu
    type: bool
    restore_value: no
    initial_value: "true"
    
## Draw battery icon if battery level is supported
  - id: draw_battery_level
    type: bool
    restore_value: no
    initial_value: "true"
    
## Draw shuffle icon if shuffle is disabled
  - id: draw_shuffle_disabled
    type: bool
    restore_value: no
    initial_value: "false"
    
## Customize device boot name
  - id: boot_device_name
    type: std::string
    restore_value: no
    initial_value: '"M5Stack Fire Remote <3"'

custom_component:
## Home assistant speakers and tv. Set TV up with a sound bar
- lambda: |-
    std::vector<std::string> speakerNames { 
      "media_player.beam", 
      "media_player.kitchen", 
      "media_player.bedroom"
    };
    TVSetup tvSetup = TVSetup("media_player.55_tcl_roku_tv", "media_player.beam");
    speakerGroup->setup(speakerNames, tvSetup);
    App.register_component(speakerGroup);
    return {speakerGroup};
  id: speaker_group_component
  
## Home assistant scripts and scenes. Set with a friendly name
- lambda: |-
    std::vector<BaseService> scenes { 
      ScriptService("script.colors", "Colors"), 
      ScriptService("script.warm", "Warm"), 
      ScriptService("script.dim_scene_script", "Dim"),
      ScriptService("script.off", "Lights Off"),
      SceneService("scene.hell", "Hell"),
      ScriptService("script.feed_cat_single", "Feed cat")
    };
    sceneGroup->setup(scenes);
    App.register_component(sceneGroup);
    return {sceneGroup};
  id: scene_group_component

## Home assistant lights. Set with a friendly name
- lambda: |-
    std::vector<FriendlyNameEntity> lights { 
      FriendlyNameEntity("light.bathroom_lights", "Bathroom"), 
      FriendlyNameEntity("light.bedroom_lights", "Bedroom"), 
      FriendlyNameEntity("light.kitchen_lights", "Kitchen"), 
      FriendlyNameEntity("light.living_room_lights", "Living Room"), 
      FriendlyNameEntity("light.office_lamp", "Office Lamp")
    };
    lightGroup->setup(lights);
    App.register_component(lightGroup);
    return {lightGroup};
  id: light_group_component

## Home assistant sensors. Set with a friendly name
- lambda: |-
    std::vector<FriendlyNameEntity> sensors { 
      FriendlyNameEntity("sensor.current_time", ""),
      FriendlyNameEntity("sensor.accuweather_realfeel_temperature", "Temperature"),
      FriendlyNameEntity("sensor.vancouver_forecast", ""),
      FriendlyNameEntity("sensor.washing_machine_state", "Washing Machine"),
      FriendlyNameEntity("sensor.soil_sensor_soil_moisture_2", "Plant Moisture")
    };
    sensorGroup->setup(sensors);
    App.register_component(sensorGroup);
    return {sensorGroup};
  id: sensor_group_component

interval:
  - interval: 1s
    then:
    - lambda: |-
        idleTick();
  - interval: 0.3s
    then:
    - lambda: |-
        activeTick();

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: gpio
    id: M5_BtnA
    pin:
      number: 39
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressLeft();
  - platform: gpio
    id: M5_BtnB
    pin:
      number: 38
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressSelect();
  - platform: gpio
    id: M5_BtnC
    pin:
      number: 37
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressRight();

# We can still control the backlight independently
switch:
  - platform: template
    name: M5Stack Fire Sleep Toggle
    id: tt_sleep
    optimistic: true
    on_turn_on:
      then:
        - deep_sleep.enter:
            id: deep_sleep_1
  - platform: gpio
    pin: 32
    name: "Backlight"
    id: backlight
    restore_mode: ALWAYS_ON
    internal: true

time:
  - platform: homeassistant
    id: esptime

light:
  - platform: fastled_clockless
    chipset: SK6812
    pin: GPIO15
    num_leds: 10
    rgb_order: GRB
    id: side_light
    name: "Remote Light"
    restore_mode: ALWAYS_OFF
    default_transition_length: 0s
    effects:
      - addressable_rainbow:
          name: Rainbow Effect
          speed: 20
          width: 15

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

display:
  - platform: ili9341
    model: M5STACK
    cs_pin: 14
    dc_pin: 27
    led_pin: 32  ### see note below ###
    reset_pin: 33
    id: my_display
    update_interval: 10s
    lambda: |-
      manageLight();
      if (idleTime < 0) {
        ESP_LOGD("drawing menu", "turning on");
        id(backlight).turn_on();
        idleTime = 0;
      }
      drawMenu();
      return;
      