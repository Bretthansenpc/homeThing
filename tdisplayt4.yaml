esphome:
  name: tdisplayt4
  includes:
    - esphomeRemote/MenuGlobals.h
    - esphomeRemote/MenuTitle.h
    - esphomeRemote/esphomeRemotePlayer.h
    - esphomeRemote/esphomeRemoteService.h
    - esphomeRemote/esphomeRemoteLight.h
    - esphomeRemote/esphomeRemoteSensor.h
    - esphomeRemote/DisplayUpdateInterface.h
    - esphomeRemote/esphomeRemote.h
    - esphomeRemote/esphomeRemote3Button.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption

ota:
  password: !secret ota_encryption

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESPHome Remote Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

deep_sleep:
  id: deep_sleep_1

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 45%
    blue: 68%
  - id: my_gray_dark
    red: 40%
    green: 40%
    blue: 40%
  - id: my_gray_dark_2
    red: 3%
    green: 3%
    blue: 3%
  - id: my_gray
    red: 10%
    green: 10%
    blue: 10%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "fonts/iosevka.ttf"
    id: large_font
    size: 24
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''
  - file: "fonts/iosevka.ttf"
    id: medium_font
    size: 15
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''
  - file: "fonts/iosevka.ttf"
    id: small_font
    size: 14
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''

image:
  - file: "images/playWhite.png"
    id: image_play_white
    type: RGB24
  - file: "images/play.png"
    id: image_play
    type: RGB24
  - file: "images/pause.png"
    id: image_pause
    type: RGB24
  - file: "images/pauseWhite.png"
    id: image_pause_white
    type: RGB24
  - file: "images/stop.png"
    id: image_stop
    type: RGB24
  - file: "images/stopWhite.png"
    id: image_stop_white
    type: RGB24
  - file: "images/sleepWhite.png"
    id: image_sleep_white
    type: RGB24
  - file: "images/sleep.png"
    id: image_sleep
    type: RGB24
  - file: "images/shuffle.png"
    id: image_shuffle
    type: RGB24
  - file: "images/shuffleDisabled.png"
    id: image_shuffle_disabled
    type: RGB24
  - file: "images/volumeLow.png"
    id: image_volume_low
    type: RGB24
  - file: "images/volumeHigh.png"
    id: image_volume_high
    type: RGB24
    
globals:
  - id: large_font_size
    type: int
    restore_value: no
    initial_value: "28"
  - id: medium_font_size
    type: int
    restore_value: no
    initial_value: "22"
  - id: small_font_size
    type: int
    restore_value: no
    initial_value: "18"
  - id: font_size_width_ratio
    type: double
    restore_value: no
    initial_value: "0.6"
  - id: header_height
    type: int
    restore_value: no
    initial_value: "24"
  - id: margin_size
    type: int
    restore_value: no
    initial_value: "8"
  - id: scroll_bar_width
    type: int
    restore_value: no
    initial_value: "6"
  - id: bottom_bar_margin
    type: int
    restore_value: no
    initial_value: "42"
  - id: icon_size
    type: int
    restore_value: no
    initial_value: "12"
  - id: draw_now_playing_menu
    type: bool
    restore_value: no
    initial_value: "true"
  - id: draw_battery_level
    type: bool
    restore_value: no
    initial_value: "false"
  - id: boot_device_name
    type: std::string
    restore_value: no
    initial_value: '"T4 Remote <3"'

custom_component:
- lambda: |-
    std::vector<std::string> speakerNames { 
      "media_player.beam", 
      "media_player.kitchen", 
      "media_player.bedroom"
    };
    TVSetup tvSetup = TVSetup("media_player.55_tcl_roku_tv", "media_player.beam");
    speakerGroup->setup(speakerNames, tvSetup);
    App.register_component(speakerGroup);
    return {speakerGroup};
  id: speaker_group_component
- lambda: |-
    std::vector<BaseService> scenes { 
      ScriptService("script.colors", "Colors"), 
      ScriptService("script.warm", "Warm"), 
      ScriptService("script.dim_scene_script", "Dim"),
      ScriptService("script.off", "Lights Off"),
      SceneService("scene.hell", "Hell"),
      ScriptService("script.feed_cat_single", "Feed cat")
    };
    sceneGroup->setup(scenes);
    App.register_component(sceneGroup);
    return {sceneGroup};
  id: scene_group_component
- lambda: |-
    std::vector<FriendlyNameEntity> lights { 
      FriendlyNameEntity("light.bathroom_lights", "Bathroom"), 
      FriendlyNameEntity("light.bedroom_lights", "Bedroom"), 
      FriendlyNameEntity("light.kitchen_lights", "Kitchen"), 
      FriendlyNameEntity("light.living_room_lights", "Living Room"), 
      FriendlyNameEntity("light.office_lamp", "Office Lamp")
    };
    lightGroup->setup(lights);
    App.register_component(lightGroup);
    return {lightGroup};
  id: light_group_component
- lambda: |-
    std::vector<FriendlyNameEntity> sensors { 
      FriendlyNameEntity("sensor.current_time", ""),
      FriendlyNameEntity("sensor.accuweather_realfeel_temperature", "Temperature"),
      FriendlyNameEntity("sensor.vancouver_forecast", ""),
      FriendlyNameEntity("sensor.washing_machine_state", "Washing Machine"),
      FriendlyNameEntity("sensor.soil_sensor_soil_moisture_2", "Plant Moisture")
    };
    sensorGroup->setup(sensors);
    App.register_component(sensorGroup);
    return {sensorGroup};
  id: sensor_group_component
  
sensor:
  - platform: template
    id: display_update_tick
    filters:
      - debounce: 0.02s
    on_value :
      then:
        - lambda: |-
            if(idleTime < 2) {
              displayUpdate.updateDisplay(true);
            }
  - platform: template
    name: Battery Percent
    id: TTGoBatteryPercent
    unit_of_measurement: '%'

interval:
  - interval: 1s
    then:
    - lambda: |-
        idleTick();

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: gpio
    id: T4_BtnA
    pin:
      number: 38
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressLeft();
  - platform: gpio
    id: T4_BtnB
    pin:
      number: 37
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressSelect();
  - platform: gpio
    id: T4_BtnC
    pin:
      number: 39
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressRight();

# We can still control the backlight independently
switch:
  - platform: gpio
    pin:
      number: 27
      inverted: false
    id: comb
    internal: true
  - platform: gpio
    pin:
      number: 26
      inverted: false
    id: coma
    internal: true
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight
    internal: true
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: Sleep Toggle
    id: tt_sleep
    optimistic: true
    internal: true
    on_turn_on:
      then:
        - deep_sleep.enter:
            id: deep_sleep_1

time:
  - platform: homeassistant
    id: esptime

spi:
  clk_pin: 18
  miso_pin: 12
  mosi_pin: 23

display:
  - platform: ili9341
    id: my_display
    model: TFT_2.4
    cs_pin: 27
    dc_pin: 32
    led_pin: 04  ### see note below ###
    reset_pin: 05
    update_interval: 60s
    lambda: |-
      if (idleTime < 0) {
        ESP_LOGD("drawing menu", "turning on");
        id(backlight).turn_on();
        idleTime = 0;
      } else if (!id(backlight).state) {
        ESP_LOGD("drawing menu", "turning off %d", idleTime);
        id(my_display).set_update_interval(60000);
        return;
      }

      drawMenu();
      return;