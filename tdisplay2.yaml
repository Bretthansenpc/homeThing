esphome:
  name: tdisplay2
  platform: ESP32
  board: featheresp32
  includes:
    - esphomeRemote/MenuGlobals.h
    - esphomeRemote/MenuTitle.h
    - esphomeRemote/esphomeRemotePlayer.h
    - esphomeRemote/esphomeRemoteService.h
    - esphomeRemote/esphomeRemoteLight.h
    - esphomeRemote/esphomeRemoteSensor.h
    - esphomeRemote/DisplayUpdateInterface.h
    - esphomeRemote/esphomeRemote.h
    - esphomeRemote/esphomeRemoteRotary.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESPHome Remote Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:

deep_sleep:
  id: deep_sleep_1

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 45%
    blue: 68%
  - id: my_gray_dark
    red: 40%
    green: 40%
    blue: 40%
  - id: my_gray_dark_2
    red: 3%
    green: 3%
    blue: 3%
  - id: my_gray
    red: 10%
    green: 10%
    blue: 10%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
## Font needs to be monospace!
  - file: "fonts/iosevka.ttf"
    id: large_font
    size: 24
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''
  - file: "fonts/iosevka.ttf"
    id: medium_font
    size: 15
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''
  - file: "fonts/iosevka.ttf"
    id: small_font
    size: 14
    glyphs: '*/\$#<>!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êé'''

image:
## You need 2 icons for each, one with a color background, one with black
## todo would be make these material icons or svg
  - file: "images/playWhite.png"
    id: image_play_white
    type: RGB24
  - file: "images/play.png"
    id: image_play
    type: RGB24
  - file: "images/pause.png"
    id: image_pause
    type: RGB24
  - file: "images/pauseWhite.png"
    id: image_pause_white
    type: RGB24
  - file: "images/stop.png"
    id: image_stop
    type: RGB24
  - file: "images/stopWhite.png"
    id: image_stop_white
    type: RGB24
  - file: "images/sleepWhite.png"
    id: image_sleep_white
    type: RGB24
  - file: "images/sleep.png"
    id: image_sleep
    type: RGB24
  - file: "images/shuffle.png"
    id: image_shuffle
    type: RGB24
  - file: "images/shuffleDisabled.png"
    id: image_shuffle_disabled
    type: RGB24
  - file: "images/volumeLow.png"
    id: image_volume_low
    type: RGB24
  - file: "images/volumeHigh.png"
    id: image_volume_high
    type: RGB24
    
globals:
## Size of the large font above
  - id: large_font_size
    type: int
    restore_value: no
    initial_value: "24"
    
## Size of the medium font above
  - id: medium_font_size
    type: int
    restore_value: no
    initial_value: "15"
    
## Size of the small font above
  - id: small_font_size
    type: int
    restore_value: no
    initial_value: "14"
    
## Height / width ratio of the monospace font used
  - id: font_size_width_ratio
    type: double
    restore_value: no
    initial_value: "0.6"
    
## Status bar height
  - id: header_height
    type: int
    restore_value: no
    initial_value: "16"
    
## Global margin size
  - id: margin_size
    type: int
    restore_value: no
    initial_value: "4"
    
## Scrollbar total width
  - id: scroll_bar_width
    type: int
    restore_value: no
    initial_value: "6"
    
## Volume bar and media duration bar margin
  - id: bottom_bar_margin
    type: int
    restore_value: no
    initial_value: "1"
    
## Height and width of the icons used in px
  - id: icon_size
    type: int
    restore_value: no
    initial_value: "12"
    
## Max lines on now playing screen before truncating happens
  - id: now_playing_max_lines
    type: int
    restore_value: no
    initial_value: "5"
    
## Draw buttons in now playing menu for 3 button devices
  - id: draw_now_playing_menu
    type: bool
    restore_value: no
    initial_value: "false"
    
## Draw battery icon if battery level is supported
  - id: draw_battery_level
    type: bool
    restore_value: no
    initial_value: "true"
    
## Draw shuffle icon if shuffle is disabled
  - id: draw_shuffle_disabled
    type: bool
    restore_value: no
    initial_value: "false"
    
## Customize device boot name
  - id: boot_device_name
    type: std::string
    restore_value: no
    initial_value: '"TDisplay Remote 2"'

custom_component:
## Home assistant speakers and tv. Set TV up with a sound bar
- lambda: |-
    std::vector<std::string> speakerNames { 
      "media_player.beam", 
      "media_player.kitchen", 
      "media_player.bedroom"
    };
    TVSetup tvSetup = TVSetup("media_player.55_tcl_roku_tv", "media_player.beam");
    speakerGroup->setup(speakerNames, tvSetup);
    App.register_component(speakerGroup);
    return {speakerGroup};
  id: speaker_group_component
  
## Home assistant scripts and scenes. Set with a friendly name
- lambda: |-
    std::vector<BaseService> scenes { 
      ScriptService("script.colors", "Colors"), 
      ScriptService("script.warm", "Warm"), 
      ScriptService("script.dim_scene_script", "Dim"),
      ScriptService("script.off", "Lights Off"),
      SceneService("scene.hell", "Hell"),
      ScriptService("script.feed_cat_single", "Feed cat")
    };
    sceneGroup->setup(scenes);
    App.register_component(sceneGroup);
    return {sceneGroup};
  id: scene_group_component

## Home assistant lights. Set with a friendly name
- lambda: |-
    std::vector<FriendlyNameEntity> lights { 
      FriendlyNameEntity("light.bathroom_lights", "Bathroom"), 
      FriendlyNameEntity("light.bedroom_lights", "Bedroom"), 
      FriendlyNameEntity("light.kitchen_lights", "Kitchen"), 
      FriendlyNameEntity("light.living_room_lights", "Living Room"), 
      FriendlyNameEntity("light.office_lamp", "Office Lamp")
    };
    lightGroup->setup(lights);
    App.register_component(lightGroup);
    return {lightGroup};
  id: light_group_component

## Home assistant sensors. Set with a friendly name
- lambda: |-
    std::vector<FriendlyNameEntity> sensors { 
      FriendlyNameEntity("sensor.current_time", ""),
      FriendlyNameEntity("sensor.accuweather_realfeel_temperature", "Temperature"),
      FriendlyNameEntity("sensor.vancouver_forecast", ""),
      FriendlyNameEntity("sensor.washing_machine_state", "Washing Machine"),
      FriendlyNameEntity("sensor.soil_sensor_soil_moisture_2", "Plant Moisture")
    };
    sensorGroup->setup(sensors);
    App.register_component(sensorGroup);
    return {sensorGroup};
  id: sensor_group_component
  
sensor:
## Rotary
  - platform: rotary_encoder
    filters:
    - throttle: 0.01s
    name: "Rotary Encoder"
    internal: true
    pin_a:
      number: 21
      mode:
        input: true
        pullup: true
    pin_b:
      number: 22
      mode:
        input: true
        pullup: true
    id: rotary
    on_clockwise:
      - lambda: |-
          buttonPressWakeUpDisplay();
          buttonPressNext();
    on_anticlockwise:
      - lambda: |-
          buttonPressWakeUpDisplay();
          buttonPressPrevious();

## Needed to debounce screen updates for rotary. 17ms is close to 60fps for st7789v
  - platform: template
    id: display_update_tick
    filters:
      - debounce: 17ms
    on_value :
      then:
        - lambda: |-
            displayUpdateDebounced();
          
## Battery
  - platform: adc
    pin: 34
    attenuation: 11db
    name: "vccadc"
    update_interval: 250ms
    id: vcc_adc
    internal: true
    on_value:
      then:
        lambda: |-
          if (id(vcc_adc).state > 2.23) {
            if (charging == false) {
              charging = true;
            }
          } else {
            if (charging == true) {
              charging = false;
            }
          }
          id(vcc_adc_avg).publish_state(id(vcc_adc).state);
  - platform: template
    id: vcc_adc_avg
    filters:
      - sliding_window_moving_average:
          window_size: 4
          send_every: 4
    on_value :
      then:
        - sensor.template.publish:
            id: batteryVoltage
            state: !lambda 'return id(vcc_adc).state;'
  - platform: template
    name: batteryVoltage
    id: batteryVoltage
    internal: true
    unit_of_measurement: 'V'
    on_value :
      then:
        - sensor.template.publish:
            id: batteryPercent
            state: !lambda 'return (id(batteryVoltage).state * 118) - 162;'
  - platform: template
    name: Battery Percent
    id: batteryPercent
    unit_of_measurement: '%'
    on_value_range:
      below: 5
      then:
        lambda: |-
          ESP_LOGE("SLEEP", "Low Power Supply %.3fV! Sleeping to protect battery", id(batteryPercent).state);
          id(tt_sleep).turn_on();

interval:
  - interval: 1s
    then:
    - lambda: |-
        idleTick();
  - interval: 0.3s
    then:
    - lambda: |-
        activeTick();

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
    
## TDisplay buttons
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "T-Display Button Input 0"
    id: tdisplay_button_input_0
    internal: true
    on_press:
      then:
      - lambda: |-
          buttonPressScreenLeft();
    on_release:
      then:
      - lambda: |-
          buttonReleaseScreenLeft();
    
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "T-Display Button Input 1"
    id: tdisplay_button_input_1
    internal: true
    on_press:
      then:
      - lambda: |-
          buttonPressScreenRight();
          
## Rotary buttons
  - platform: gpio
    internal: true
    pin:
      number: 15
      inverted: true
      mode:
        input: true
        pullup: true
    id: sw5left
    on_press:
      then:
      - lambda: |-
          buttonPressLeft();
  - platform: gpio
    internal: true
    pin:
      number: 2
      inverted: true
      mode:
        input: true
        pullup: true
    id: sw4up
    on_press:
      then:
      - lambda: |-
          buttonPressUp();
  - platform: gpio
    internal: true
    pin:
      number: 12
      inverted: true
      mode:
        input: true
        pullup: true
    id: sw3right
    on_press:
      then:
      - lambda: |-
          buttonPressRight();
  - platform: gpio
    internal: true
    pin:
      number: 13
      inverted: true
      mode:
        input: true
        pullup: true
    id: sw2down
    on_press:
      then:
      - lambda: |-
          buttonPressDown();
  - platform: gpio
    internal: true
    pin:
      number: 17
      inverted: true
      mode:
        input: true
        pullup: true
    id: sw1select
    on_press:
      then:
      - lambda: |-
          buttonPressSelect();

switch:
  - platform: gpio
    pin:
      number: 27
      inverted: false
    id: comb
    internal: true
  - platform: gpio
    pin:
      number: 26
      inverted: false
    id: coma
    internal: true
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight
    internal: true
    restore_mode: RESTORE_DEFAULT_ON

## Exposed to home assistant so you can sleep from a script
  - platform: template
    name: TDisplay Sleep Toggle
    id: tt_sleep
    optimistic: true
    on_turn_on:
      then:
        - deep_sleep.enter:
            id: deep_sleep_1

time:
  - platform: homeassistant
    id: esptime

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    model: TTGO TDisplay 135x240
    id: my_display
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90
    update_interval: 60000s
    lambda: |-
      if (idleTime < 0) {
        ESP_LOGD("drawing menu", "turning on");
        id(backlight).turn_on();
        idleTime = 0;
      }

      drawMenu();
      return;
      