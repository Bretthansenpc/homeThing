esphome:
  name: fireremote
  platform: ESP32
  board: m5stack-fire
  includes:
    - esphomeRemote/MenuGlobals.h
    - esphomeRemote/MenuTitle.h
    - esphomeRemote/esphomeRemotePlayer.h
    - esphomeRemote/esphomeRemoteService.h
    - esphomeRemote/esphomeRemoteLight.h
    - esphomeRemote/esphomeRemoteSensor.h
    - esphomeRemote/DisplayUpdateInterface.h
    - esphomeRemote/esphomeRemote.h
    - esphomeRemote/esphomeRemote3Button.h
    - esphomeRemote/esphomeRemoteFireLight.h

substitutions:
  boot_name: '"Fire Remote <3"'
  large_font_size: "24"
  medium_font_size: "20"
  small_font_size: "18"
  header_height: "24"
  margin_size: "8"
  scroll_bar_width: "8"
  bottom_bar_margin: "42"
  now_playing_max_lines: "5"
  draw_now_playing_menu: "true"
  draw_battery_level: "true"
  draw_shuffle_disabled: "false"

<<: !include esphomeRemote/esphome-remote-base.yaml

external_components:
  - source:
      type: git
      url: https://github.com/ssieb/custom_components
    components: [ ip5306 ]

i2c:
  sda: 21
  scl: 22
  scan: True

ip5306:
  battery_level:
    name: M5 Battery Percent
    id: batteryPercent
  charger_connected:
    id: connected
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("TEST", "charging");
            if (charging == false) {
              charging = true;
            }
        
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("TEST", "not charging");
            if (charging == true) {
              charging = false;
            }
  charge_full:
    id: full
    on_press:
      then:
        - lambda: ESP_LOGD("TEST", "fully charged");
    on_release:
      then:
        - lambda: ESP_LOGD("TEST", "still charging");

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESPHome Remote Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

# Enable logging
logger:
  level: INFO

ota:

deep_sleep:
  id: deep_sleep_fire
  wakeup_pin: 39
  wakeup_pin_mode: INVERT_WAKEUP

custom_component:
## Home assistant speakers and tv. Set TV up with a sound bar
- lambda: |-
    std::vector<std::string> speakerNames { 
      "media_player.beam", 
      "media_player.kitchen", 
      "media_player.bedroom"
    };
    TVSetup tvSetup = TVSetup("media_player.55_tcl_roku_tv", "media_player.beam");
    speakerGroup->setup(speakerNames, tvSetup);
    App.register_component(speakerGroup);
    return {speakerGroup};
  id: speaker_group_component
  
## Home assistant scripts and scenes. Set with a friendly name
- lambda: |-
    std::vector<BaseService> scenes { 
      ScriptService("script.colors", "Colors"), 
      ScriptService("script.warm", "Warm"), 
      ScriptService("script.dim_scene_script", "Dim"),
      ScriptService("script.off_script", "Lights Off"),
      SceneService("scene.hell", "Hell"),
      ScriptService("script.feed_cat_single", "Feed cat")
    };
    sceneGroup->setup(scenes);
    App.register_component(sceneGroup);
    return {sceneGroup};
  id: scene_group_component

## Home assistant lights. Set with a friendly name
- lambda: |-
    std::vector<FriendlyNameEntity> lights { 
      FriendlyNameEntity("light.bathroom_lights", "Bathroom"), 
      FriendlyNameEntity("light.bedroom_lights", "Bedroom"), 
      FriendlyNameEntity("light.kitchen_lights", "Kitchen"), 
      FriendlyNameEntity("light.living_room_lights", "Living Room"), 
      FriendlyNameEntity("light.office_lamp", "Office Lamp")
    };
    lightGroup->setup(lights);
    App.register_component(lightGroup);
    return {lightGroup};
  id: light_group_component

## Home assistant sensors. Set with a friendly name
- lambda: |-
    std::vector<FriendlyNameEntity> sensors { 
      FriendlyNameEntity("sensor.current_time", ""),
      FriendlyNameEntity("sensor.accuweather_realfeel_temperature", "Temperature"),
      FriendlyNameEntity("sensor.vancouver_forecast", ""),
      FriendlyNameEntity("sensor.washing_machine_state", "Washing Machine"),
      FriendlyNameEntity("sensor.soil_sensor_soil_moisture_2", "Plant Moisture"),
      FriendlyNameEntity("sensor.particulate_matter_2_5um_concentration", "Kitchen Air")
    };
    sensorGroup->setup(sensors);
    App.register_component(sensorGroup);
    return {sensorGroup};
  id: sensor_group_component

binary_sensor:
  - platform: gpio
    id: M5_BtnA
    pin:
      number: 39
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressLeft();
  - platform: gpio
    id: M5_BtnB
    pin:
      number: 38
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressSelect();
  - platform: gpio
    id: M5_BtnC
    pin:
      number: 37
      inverted: true
    on_click:
      then:
        - lambda: |-
            buttonPressRight();

# We can still control the backlight independently
switch:
  - platform: template
    name: M5Stack Fire Sleep Toggle
    id: sleep_toggle
    optimistic: true
    on_turn_on:
      then:
        - deep_sleep.enter:
            id: deep_sleep_fire
  - platform: gpio
    pin: 32
    name: "Backlight"
    id: backlight
    restore_mode: ALWAYS_ON
    internal: true

light:
  - platform: fastled_clockless
    chipset: SK6812
    pin: GPIO15
    num_leds: 10
    rgb_order: GRB
    id: side_light
    name: "Remote Light"
    restore_mode: ALWAYS_OFF
    default_transition_length: 0s
    effects:
      - addressable_rainbow:
          name: Rainbow Effect
          speed: 20
          width: 15

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

display:
  - platform: ili9341
    model: M5STACK
    cs_pin: 14
    dc_pin: 27
    led_pin: 32  ### see note below ###
    reset_pin: 33
    id: my_display
    update_interval: 10s
    lambda: |-
      manageLight();
      if (idleTime < 0) {
        ESP_LOGD("drawing menu", "turning on");
        id(backlight).turn_on();
        idleTime = 0;
      }
      drawMenu();
      return;
      